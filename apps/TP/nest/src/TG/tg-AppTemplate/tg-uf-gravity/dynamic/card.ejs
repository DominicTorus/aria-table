'use client'
<%_ let nodesElementInfo = data.elementInfo _%>
<%_ let nodes = data _%>
<%_ let nodesAll = relation _%>
<%_ let ufKey = data1[0].ufKey _%>
<%_ let pfKey = data1[0].pfKey _%>
<%_ let sfKey = data1[0].sfKey _%>
<%_ let eventDetailsArray = data1[1] _%>
<%_ let eventDetailsObj = data1[2] _%>
<%_ let compDetailsLabel = data2 _%>
<%_ let stateAndSetStatePre =data1[3] _%>
<%_ let StateName=""_%>
<%_ for (let i = 0; i < nodesAll.length; i++) { _%>
  <%_ if (nodesAll[i].id === nodesAll[i].T_parentId) { _%>
    <%_ if (nodesAll[i].label === compDetailsLabel) { _%>
      <%_ StateName=nodesAll[i].label + nodesAll[i].id.slice(-5) _%>
      <%_ } _%> 
    <%_ } _%>  
  <%_ } _%>
import React, { useState,useContext,useEffect } from 'react' 
import { Card } from '@gravity-ui/uikit';
import { TotalContext, TotalContextProps } from '@/app/globalContext';
<%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
<%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
import { ActionTooltip } from '@gravity-ui/uikit';
<%_ } _%>
<%_ } _%>
import { AxiosService } from "@/app/components/axiosService";
import { codeExecution } from '@/app/utils/codeExecution';
const Card<%=nodesElementInfo.label %> = ({checkToAdd,setCheckToAdd}:any) => {
<%_ let columnStart = nodes.grid.column.start  _%>  
<%_ let columnEnd = nodes.grid.column.end  _%>
<%_ let rowStart = nodes.grid.row.start  _%>
<%_ let rowEnd = nodes.grid.row.end  _%>
<%_ let gap = nodes.grid.style.gap  _%>  
<%_ for (let i = 0; i < nodesAll.length; i++) { _%>
  <%_ if (nodesAll[i].id === nodesAll[i].T_parentId) { _%>
    const {<%= nodesAll[i].label  %><%= nodesAll[i].id.slice(-5) %>, set<%= nodesAll[i].label %><%= nodesAll[i].id.slice(-5) %>} = useContext(TotalContext) as TotalContextProps
    <%_ } _%>  
  <%_ } _%>

  const handleCode=async () => {
    const code = await AxiosService.post('/UF/code', {
      key: '<%=ufKey%>',
      groupId: '<%= nodes.id%>',
      controlId:"<%= nodes.id %>"
    })
    if (code?.data?.error == true) {
      //toast(code?.data?.errorDetails?.message, 'danger')
      //return
    }  else if (code?.data != '') {
        let codeStates: any = {}
        <%_ for (let i = 0; i < nodesAll.length; i++) { _%>
      <%_ if (nodesAll[i].id === nodesAll[i].T_parentId) { _%>
        codeStates['<%= nodesAll[i].label  %>'] %> = <%= nodesAll[i].label  %><%= nodesAll[i]?.id.slice(-5) %>,
        codeStates['set<%= nodesAll[i].label %>'] = set<%= nodesAll[i]?.label  %><%= nodesAll[i].id.slice(-5) %>,
        <%_ } _%>  
      <%_ } _%>
      codeExecution(code.data,codeStates)
    }
  }

useEffect(() => {
  handleCode()
}, [])

  const style = {
    width: `${<%= columnEnd-columnStart %> * 100}px`,
    height: `${<%= rowEnd-rowStart %> * 100}px`,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  }
  return (
    <div className="col-start-<%= columnStart %> col-end-<%= columnEnd %> row-start-<%= rowStart %> row-end-<%= rowEnd %> gap-<%= gap %>" >
      <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
      <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
      <ActionTooltip <%_ for(let j=0;j<nodesElementInfo.props[i].tooltipProps.length;j++) { _%><%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "title" && nodesElementInfo.props[i].tooltipProps[j].value !== ""){ _%><%= ' '  %>title="<%= nodesElementInfo.props[i].tooltipProps[j].value %>"<%_ } _%> <%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "placement" && nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue.length){ _%><%_ %><%= ' '  %>placement="<%= nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue[0] %>"<%_ } _%><%_ } _%>>
      <%_ } _%>
      <%_ } _%>
      <Card 
      style={style}
      <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
      <%_ if(nodesElementInfo.props[i].name === "size" && nodesElementInfo.props[i].enum.selectedValue.length){ _%>
      size="<%= nodesElementInfo.props[i].enum.selectedValue[0] %>"
      <%_ } _%>
      <%_ if(nodesElementInfo.props[i].name === "theme" && nodesElementInfo.props[i].enum.selectedValue.length){ _%>
      theme="<%= nodesElementInfo.props[i].enum.selectedValue[0] %>"
      <%_ } _%>
      <%_ if(nodesElementInfo.props[i].name === "view" && nodesElementInfo.props[i].enum.selectedValue.length){ _%>
      view="<%= nodesElementInfo.props[i].enum.selectedValue[0] %>"
      <%_ } _%>
      <%_ if(nodesElementInfo.props[i].name === "disabled" && nodesElementInfo.props[i].enum.selectedValue.length){ _%>
      disabled={<%= nodesElementInfo.props[i].enum.selectedValue[0] %>}
      <%_ } _%>
      <%_ } _%>
      ><%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%><%_ if(nodesElementInfo.props[i].name === "children" && nodesElementInfo.props[i].value !== ""){ _%><%= nodesElementInfo.props[i].value %><%_ } _%><%_ } _%>
      Normal
      </Card>
      <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
      <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
      </ActionTooltip>
      <%_ } _%>
      <%_ } _%>
    </div>
  )
}
export default Card<%=nodesElementInfo.label %>



