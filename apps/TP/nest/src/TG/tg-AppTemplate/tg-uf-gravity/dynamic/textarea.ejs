'use client'
<%_ let nodesElementInfo= data.elementInfo _%>
<%_ let nodes = data _%>
<%_ let name=data.label _%>
<%_ let nodesAll = relation _%>
<%_ let ufKey = data1[0].ufKey _%>
<%_ let pfKey = data1[0].pfKey _%>
<%_ let sfKey = data1[0].sfKey _%>
<%_ let eventDetailsArray = data1[1] _%>
<%_ let eventDetailsObj = data1[2] _%>
<%_ let compDetailsLabel = data2 _%>
<%_ let stateAndSetStatePre = data1[3] _%>
<%_ let compDetailsID = data2.componentsId _%>
import React, { useState,useContext,useEffect } from 'react'
<%_ let StateName=""_%>
<%_ for (let i = 0; i < nodesAll.length; i++) { _%>
  <%_ if (nodesAll[i].id === nodesAll[i].T_parentId) { _%>
    <%_ if (nodesAll[i].id === compDetailsID) { _%>
      <%_ StateName=nodesAll[i].label + nodesAll[i].id.slice(-5) _%>
      <%_ } _%> 
    <%_ } _%>  
  <%_ } _%>
import { TotalContext, TotalContextProps } from '@/app/globalContext';
import {TextArea} from "@gravity-ui/uikit";
<%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
  <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
import { ActionTooltip } from '@gravity-ui/uikit';
<%_ } _%>
<%_ } _%>
import { codeExecution } from '@/app/utils/codeExecution';
import { AxiosService } from '@/app/components/axiosService'
const Textarea<%=name %> = ({checkToAdd,setCheckToAdd}:any) => {
  <%_ for (let i = 0; i < nodesAll.length; i++) { _%>
    <%_ if (nodesAll[i].id === nodesAll[i].T_parentId) { _%>
      const {<%= nodesAll[i].label  %><%= nodesAll[i].id.slice(-5) %>, set<%= nodesAll[i].label %><%= nodesAll[i].id.slice(-5) %>} = useContext(TotalContext) as TotalContextProps
      <%_ } _%>  
    <%_ } _%>
<%_ let columnStart = nodes.grid.column.start  _%>  
<%_ let columnEnd = nodes.grid.column.end  _%>
<%_ let rowStart = nodes.grid.row.start  _%>
<%_ let rowEnd = nodes.grid.row.end  _%>
<%_ let gap = nodes.grid.style.gap  _%>
const handleChange = (e: any) => {
  <%_ for (let i = 0; i < nodesAll.length; i++) { _%>
    <%_ if (nodesAll[i].id === nodesAll[i].T_parentId) { _%>
      <%_ if (nodesAll[i].id === compDetailsID) { _%>
        <%_ if(nodesElementInfo.type === "text"){ _%>
         set<%= nodesAll[i].label %><%= nodesAll[i].id.slice(-5) %>((prev: any) => ({ ...prev, <%=name.toLowerCase() %>: e.value }))
        <%_}_%>
        <%_ } _%> 
      <%_ } _%>  
    <%_ } _%>
}

const handleBlur=async (e:any) => {
  const code = await AxiosService.post('/UF/code', {
    key: '<%=ufKey%>',
    groupId: '<%= compDetailsID%>',
    controlId:"<%= nodes.id %>"
  })
  if (code?.data?.error == true) {
    //toast(code?.data?.errorDetails?.message, 'danger')
    //return
  }  else if (code?.data != '') {
    let codeStates: any = {}
    <%_ for (let i = 0; i < nodesAll.length; i++) { _%>
      <%_ if (nodesAll[i].id === nodesAll[i].T_parentId) { _%>
          codeStates['<%= nodesAll[i].label  %>'] %> = <%= nodesAll[i].label  %><%= nodesAll[i].id.slice(-5) %>,
          codeStates['set<%= nodesAll[i].label %>'] = set<%= nodesAll[i].label  %><%= nodesAll[i].id.slice(-5) %>,
        <%_ } _%>  
      <%_ } _%>
  codeExecution(code.data,codeStates)
  }
}

return (
  <div className="col-start-<%= columnStart %> col-end-<%= columnEnd %> row-start-<%= rowStart %> row-end-<%= rowEnd %> gap-<%= gap %>" >
  <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
    <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
      <ActionTooltip <%_ for(let j=0;j<nodesElementInfo.props[i].tooltipProps.length;j++) { _%><%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "title" && nodesElementInfo.props[i].tooltipProps[j].value !== ""){ _%><%= ' '  %>title="<%= nodesElementInfo.props[i].tooltipProps[j].value %>"<%_ } _%> <%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "placement" && nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue.length){ _%><%_ %><%= ' '  %>placement="<%= nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue[0] %>"<%_ } _%><%_ } _%>>
      <%_ } _%>
  <%_ } _%>
  <TextArea
   onBlur={handleBlur}
    onChange={e => handleChange(e.target)}
    value={<%=StateName%>?.<%=name.toLowerCase()%>?<%=StateName%>?.<%=name.toLowerCase()%>:""}
    <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
    <%_ if(nodesElementInfo.props[i].name === "minRows" && nodesElementInfo.props[i].value !== ""){ _%>
    minRows={<%= nodesElementInfo.props[i].value %>}
    <%_ } _%>
    <%_ if(nodesElementInfo.props[i].name === "maxRows" && nodesElementInfo.props[i].value !== ""){ _%>
    maxRows={<%= nodesElementInfo.props[i].value %>}
    <%_ } _%>
    <%_ if(nodesElementInfo.props[i].name === "placeholder" && nodesElementInfo.props[i].value !=="" ){ _%>
    placeholder='<%= nodesElementInfo.props[i].value %>'
    <%_ } _%>
    <%_ if(nodesElementInfo.props[i].name === "disabled"&& nodesElementInfo.props[i].enum.selectedValue.length){ _%>
    disabled={<%= nodesElementInfo.props[i].enum.selectedValue[0] %>}
    <%_ } _%>
    <%_ if(nodesElementInfo.props[i].name === "readOnly"&& nodesElementInfo.props[i].enum.selectedValue.length){ _%>
    readOnly={<%= nodesElementInfo.props[i].enum.selectedValue[0] %>}
    <%_ } _%>
    <%_ if(nodesElementInfo.props[i].name==="pin" && nodesElementInfo.props[i].enum.selectedValue.length){ _%>
      pin='<%= nodesElementInfo.props[i].enum.selectedValue[0] %>'      <%_ } _%>
    <%_ if(nodesElementInfo.props[i].name === "size"&& nodesElementInfo.props[i].enum.selectedValue.length){ _%>
    size='<%= nodesElementInfo.props[i].enum.selectedValue[0] %>' 
    <%_ } _%>
    <%_ } _%>
      />
    <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
    <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
  </ActionTooltip>
    <%_ } _%>
    <%_ } _%>
  </div>
  )
}
export default Textarea<%= name %>