<%_ let propName; _%>
<%_ let selectedValue; _%>
<%_ let ufKey = relation[1]; _%>
<%_ let eventArray = data1[0]; _%>
<%_ let eventDetailsArray = eventArray[0]; _%>
<%_ let groupName = data1[1]; _%>
<%_ let controlName = data1[2]; _%>
<%_ let handler = []; _%>
<%_ let infoMessage = { message: '' ,type : '' }; _%>
<%_ let navigator = { status: false, toScreen: '' }; _%>
<%_ let isSetFormData = false; _%>
<%_ function generateClassName(str) { return str.split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(''); 
} _%>
import '../.././../exports.dart';
import 'package:flutter/material.dart';

class <%= relation[0] %> extends StatefulWidget {
  final GSButtonActions action;
  final GSButtonVariants variant;
  final GSButtonSizes size;
  final bool isDisabled;
  final String? buttonText;
  final IconData? icon;
  final bool enableSpinner;
  final bool enableIcon;
  final GSSizes iconSize;
  final Color? iconColor;
  final Color? spinnerColor;
  final GSSpinnerSizes spinnerSize;
  final bool isBlockButton;
  final Map<String, dynamic>? formData;
  final VoidCallback? callback;

  const <%= relation[0] %>({
    super.key,
    this.formData,
    this.callback,
    <%_ if(data.elementInfo.props){ _%>
    <%_ data.elementInfo.props.forEach(prop => { _%>
      <%_
        propName = prop.name;
        selectedValue = prop.enum.selectedValue;
        if(selectedValue && selectedValue.length > 0){
          selectedValue = prop.enum.selectedValue;
        } else{
          selectedValue = prop.default;
        }
      _%>
      <%_ if(propName === 'action'){ _%>
    this.action = GSButtonActions.<%= selectedValue %>,
      <%_ } _%>
      <%_ if(prop.name === 'variant' ){ _%>
    this.variant = GSButtonVariants.<%= selectedValue %>,
      <%_ } _%>
      <%_ if(prop.name === 'size' ){ _%>
    this.size = GSButtonSizes.$<%= selectedValue %>,
      <%_ } _%>
      <%_ if(prop.name ==='isDisabled' ){ _%>
    this.isDisabled = <%= selectedValue %>,
      <%_ } _%>
      <%_ if(prop.name ==='enableSpinner' ){ _%>
    this.enableSpinner = <%= selectedValue %>,
      <%_ } _%>
      <%_ if(prop.name ==='enableIcon' ){ _%>
    this.enableIcon = <%= selectedValue %>,
      <%_ } _%>
      <%_ if(prop.name ==='icon'){ _%>
    this.icon <%_ if(prop.value) {_%> = Icons.'<%= prop.value %>' <%_ } _%> ,
      <%_ } _%>
      <%_ if(prop.name ==='iconSize' ){ _%>
    this.iconSize = GSSizes.$<%= selectedValue %>,
      <%_ } _%>
      <%_ if(prop.name === 'iconColor' ){ _%>
    this.iconColor <%_ if(prop.value) {_%> = Colors.'<%= prop.value %>' <%_ } _%> ,
      <%_ } _%>
      <%_ if(prop.name === 'spinnerColor' ){ _%>
    this.spinnerColor <%_ if(prop.value) {_%> = Colors.'<%= prop.value %>' <%_ } _%> ,
      <%_ } _%>
      <%_ if(prop.name === 'spinnerSize' && selectedValue){ _%>
    this.spinnerSize = GSSpinnerSizes.<%= selectedValue %>,
      <%_ } _%>
      <%_ if(prop.name === 'isBlockButton' ){ _%>
    this.isBlockButton = <%= selectedValue %>,
      <%_ } _%>
    <%_ }); _%>
    <%_ if(data.elementInfo.label){ _%>
    this.buttonText = '<%= data.elementInfo.label %>',
    <%_ } _%>
    <%_ } _%>
  });

  @override
  State<<%= relation[0] %>> createState() => _<%= relation[0] %>State();
}

class _<%= relation[0] %>State extends State<<%= relation[0] %>> {
  bool _isLoading = false;
  String? dfKey;

//INFO MESSSAGE AND SET FORM DATA
<%_ for(let i = 0; i < eventDetailsArray.length; i++){ _%>
    <%_ if(eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'infoMsg' && eventDetailsArray[i].hlr){ _%>
      <%_ infoMessage.message = eventDetailsArray[i].hlr.params.message; _%>
      <%_ infoMessage.type = eventDetailsArray[i].hlr.params.type; _%>
    <%_ }_%>
    <%_ if(eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'setFormData'){ _%>
      <%_ isSetFormData = true; _%>
    <%_ } _%>
<%_ } _%>
//SHOW PROFILE
<%_ for(let i = 0; i < eventDetailsArray.length; i++){ _%>
    <%_ if(eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'showProfile' ){ _%>
      <%_ for(let j = 0; j < eventDetailsArray.length; j++){ _%>
        <%_ if(eventDetailsArray[j].key){ _%>
          <%_ navigator.toScreen = generateClassName(eventDetailsArray[j].name.split('.')[0]); _%>
        <%_ } _%>
      <%_ } _%>
      <%_ navigator.status = true _%>
    <%_ } _%> 
<%_ } _%>

  Future<void> getDFKey() async {
    try {
      final response = await ApiService.get(
        '${Constants.ufKeyDetails}<%= ufKey %>',
        null,
      );

      if (response?.statusCode == 200) {
        setState(() {
          dfKey = jsonDecode(response!.body)[0];
        });
      } else {
        Common.flutterToaster('Error getting DF key', 'f');
      }
    } catch (_) {
      Common.flutterToaster('Error getting DF key', 'f');
    }
  }

  Future<Map<String, dynamic>> getPFDetails() async {
    try {
      final pfDetails = await ApiService.post(
        Constants.getPFDetails,
        null,
        {
          "key": '<%= ufKey %>',
          "groupName": '<%= groupName %>',
          "controlName": '<%= controlName %>'
        },
      );
      if (pfDetails?.statusCode == 201) {
        final ufPFDetails = jsonDecode(pfDetails!.body);
        return ufPFDetails;
      } else {
        Common.flutterToaster(jsonDecode(pfDetails!.body)['errorDetails']['message'] ?? 'Failed to Get PF Details','F');
        return {};
      }
    } catch (e) {
      Common.flutterToaster('Failed to Get PF Details', 'f');
      return {};
    }
  }

  Future<Map<String, dynamic>> initiatePFDetails(String pfKey) async {
    try {
      final initiatePFDetails = await ApiService.post(
        Constants.initiatePFDetails,
        null,
        {
          "key": pfKey,
        },
      );
      if (initiatePFDetails?.statusCode == 201) {
        final initiatePF = jsonDecode(initiatePFDetails!.body);
        return initiatePF;
      } else {
        Common.flutterToaster(jsonDecode(initiatePFDetails!.body)['errorDetails']['message'] ?? 'Failed to Initiate PF','f');
        return {};
      }
    } catch (e) {
      Common.flutterToaster('Failed to Initiate PF', 'f');
      return {};
    }
  }
<%_ if(eventDetailsArray && eventDetailsArray.length > 0) {_%>
  <%_ for(let i = 0; i < eventDetailsArray.length; i++){ _%>
    <%_ if(eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'saveHandler' && eventDetailsArray[i].value != 'saveAll'){ _%>
      <%_ handler.push('save') _%>
  // SAVE HANDLER
  void _handleSave() async{
    setState(() {
      _isLoading = true;
    });
    FocusScope.of(context).requestFocus(FocusNode());
    await getDFKey();
    final pfDetails = await getPFDetails();
    final pfkey = pfDetails['key'];
    if(pfkey != null && pfkey != ''){
      final url = pfDetails['url'];
      final primaryKey = pfDetails['primaryKey'];
      final initiatePF = await initiatePFDetails(pfkey ?? '');

      final eventData = {
        "status": initiatePF['eventProperty']['sourceStatus'],
        "created_by": "test",
        "modified_by": "test"
      };
      final nodeProperty = initiatePF['nodeProperty'];
      try{
       final ifo = await ApiService.post(Constants.getIFODetails, null, {
          'formData': UtilsServices.nullFilter(widget.formData!),
          'key': pfkey.toString(),
          'controlName': '<%= controlName %>'
        });
        if (ifo?.statusCode == 201) {
          final ifoData = jsonDecode(ifo!.body);
          // ignore: use_build_context_synchronously
          Provider.of<DataModel>(context, listen: false).setIFO('ifo', jsonDecode(ifo.body));
          final Map<String, dynamic> saveData = {
            ...nodeProperty,
            "data": {...UtilsServices.nullFilter(widget.formData!), ...eventData},
            "event": initiatePF['eventProperty']['sourceStatus'].toString(),
            "url": url.toString(),
            "upId": ""
          };
          final token = await UserSecureStorage.getToken(UserSecureStorage.tokenKey);
          final savehandler = await ApiService.post(
              Constants.handleSave,
              {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer $token'
              },
              saveData);
          if (savehandler?.statusCode == 201) {
            final Map<String, dynamic> updateData = {
              "data": [
                {
                  "status": jsonDecode(savehandler!.body)['event'] ?? '',
                  "modified_by": "test",
                  "process_id": jsonDecode(savehandler.body)['upId'] ?? ''
                }
              ],
              "key": dfKey,
              "upId": jsonDecode(savehandler.body)['upId'] ?? '',
              "tableName": pfDetails['url'].toString().split('/')[3],
              "primaryKey": [
                jsonDecode(savehandler.body)['insertedData'][primaryKey]
              ],
              "url": dotenv.env['DS_URL'] ?? '',
            };
            final updateResponse = await ApiService.post(
              Constants.handleUpdate,
              {
                'Content-Type': 'application/json; charset=UTF-8',
                'Authorization': 'Bearer $token'
              },
              updateData,
            );
            if (updateResponse?.statusCode == 201) {
              Common.flutterToaster('<%= infoMessage.message ?? 'Data Saved Successfully' %>' , '<%= infoMessage.type ?? 's' %>');
              <%_ if(isSetFormData){ _%>
              Provider.of<DataModel>(context, listen: false).setFormData({
                "parentData": {
                  primaryKey.toString() : jsonDecode(savehandler.body)['insertedData'][primaryKey],
                  ...widget.formData!
                },
                "parentPrimaryKey": primaryKey,
                "parentTable": pfDetails['url'].toString().split('/')[3].toString()
              });
              <%_ } _%>
              <%_ if(navigator.status){ _%>
              setState(() {
                widget.callback!();
              });
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const <%= navigator.toScreen %>(),
                  settings: RouteSettings(
                  arguments: widget.formData,
                ),
              ));
              <%_ } _%>
            } else {
              Common.flutterToaster(jsonDecode(updateResponse!.body)['errorDetails']['message'] ??'Failed to Update Status','F');
            }
          } else {
            Common.flutterToaster(jsonDecode(savehandler!.body)['errorDetails']['errorDetail'] ??'Failed to Save','F');
          }
        } else {
            Common.flutterToaster(jsonDecode(ifo!.body)['errorDetails']['message'] ??'Failed to Get IFO Details ','F');
        }
      } catch(e){
        Common.flutterToaster('Something went wrong','f');
      } finally {
        setState(() {
          _isLoading = false;
        });
      }
    } else {
      Common.flutterToaster('Invalid PF Key', 'f');
      setState(() {
        _isLoading = false;
      });
    }
  }

  <%_ } _%>
  <%_ if(eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'saveHandler' && eventDetailsArray[i].value === 'saveAll'){ _%>
  <%_ handler.push('save') _%>
  void _handleSave() async {
    setState(() {
      _isLoading = true;
    });
    FocusScope.of(context).requestFocus(FocusNode());
    await getDFKey();
    final pfDetails = await getPFDetails();
    final pfkey = pfDetails['key'];
    if (pfkey != null && pfkey != '') {
      final url = pfDetails['url'];
      final primaryKey = pfDetails['primaryKey'];
      final initiatePF = await initiatePFDetails(pfkey ?? '');

      final eventData = {
        "status": initiatePF['eventProperty']['sourceStatus'],
        "created_by": "test",
        "modified_by": "test"
      };
      final nodeProperty = initiatePF['nodeProperty'];
      try {
        final ifo = await ApiService.post(Constants.getIFODetails, null, {
          'formData': UtilsServices.nullFilter(widget.formData!),
          'key': pfkey.toString(),
          'controlName': '<%= controlName %>'
        });
        if (ifo?.statusCode == 201) {
          final ifoData = jsonDecode(ifo!.body);
          // ignore: use_build_context_synchronously
          Provider.of<DataModel>(context, listen: false)
              .setIFO('ifo', jsonDecode(ifo.body));
          final List<Map<String, dynamic>> childData =
              List<Map<String, dynamic>>.from(
                  Provider.of<DataModel>(context, listen: false).tableData);
          final Map<String, dynamic> parentData =
              Provider.of<DataModel>(context, listen: false).formData['parentData'];
          childData.forEach((map) {
            map.remove('empid');
          });
          final Map<String, dynamic> saveData = {
            ...nodeProperty,
            "data": {
              "parentData": parentData,
              "childData": UtilsServices.nullListFilter(childData),
              "parentPrimaryKey": Provider.of<DataModel>(context, listen: false).formData['parentPrimaryKey'].toString(),
              "parentTable": Provider.of<DataModel>(context, listen: false).formData['parentTable'].toString()
            },
            "event": initiatePF['eventProperty']['sourceStatus'].toString(),
            "url": url.toString(),
            "upId": ""
          };
          final token =
              await UserSecureStorage.getToken(UserSecureStorage.tokenKey);
          final savehandler = await ApiService.post(
              Constants.handleSave,
              {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer $token'
              },
              saveData);
          if (savehandler?.statusCode == 201) {
            final childArray = jsonDecode(savehandler!.body)["childArray"];
            List<int> claimsDetailIds = [];
            if (childArray is List) {
              setState(() {
                claimsDetailIds = childArray
                    .where((child) =>
                        child is Map<String, dynamic> &&
                        child.containsKey('claims_detail_id'))
                    .map<int>((child) => child['claims_detail_id'] as int)
                    .toList();
              });
            } else {
              Common.flutterToaster('Invalid primary key', 'f');
            }
            final Map<String, dynamic> updateData = {
              "data": claimsDetailIds.map((id) {
                return {
                  "status": jsonDecode(savehandler!.body)['event'] ?? '',
                  "modified_by": "test",
                  "process_id": jsonDecode(savehandler.body)['upId'] ?? '',
                };
              }).toList(),
              "key": dfKey,
              "upId": jsonDecode(savehandler.body)['upId'] ?? '',
              "tableName": pfDetails['url'].toString().split('/')[3],
              "primaryKey": claimsDetailIds,
              "url": dotenv.env['DS_URL'] ?? '',
            };
            final updateResponse = await ApiService.post(
              Constants.handleUpdate,
              {
                'Content-Type': 'application/json; charset=UTF-8',
                'Authorization': 'Bearer $token'
              },
              updateData,
            );
            if (updateResponse?.statusCode == 201) {
              Common.flutterToaster('<%= infoMessage.message ?? 'Data Saved Successfully' %>' , '<%= infoMessage.type ?? 's' %>');
             <%_ if(isSetFormData){ _%>
                Provider.of<DataModel>(context, listen: false).setFormData(widget.formData!);
              <%_ } _%>
              <%_ if(navigator.status){ _%>
              setState(() {
                widget.callback!();
              });
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const <%= navigator.toScreen %>(),
                  settings: RouteSettings(
                  arguments: widget.formData,
                ),
              ));
              <%_ } else { _%>
                Provider.of<DataModel>(context, listen: false).clearFormData();
                Navigator.pop(context);
              <%_ } _%> 
            } else {
              Common.flutterToaster(
                  jsonDecode(updateResponse!.body)['errorDetails']['message'] ??
                      'Failed to Update Status',
                  'F');
            }
          } else {
            Common.flutterToaster(
                jsonDecode(savehandler!.body)['errorDetails']['errorDetail'] ??
                    'Failed to Save',
                'F');
          }
        } else {
          Common.flutterToaster(
              jsonDecode(ifo!.body)['errorDetails']['message'] ??
                  'Failed to Get IFO Details ',
              'F');
        }
      } catch (e) {
        Common.flutterToaster('Something went wrong', 'f');
      } finally {
        setState(() {
          _isLoading = false;
        });
      }
    } else {
      Common.flutterToaster('Invalid PF Key', 'f');
      setState(() {
        _isLoading = false;
      });
    }
  }
  <%_ } _%>
  <%_ if(eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'updateHandler' ){ _%>
  <%_ handler.push('update') _%>
  // UPDATE HANDLER
  void _handleUpdate() async{
    setState(() {
      _isLoading = true;
    });
    List<String> processIds = [];
    List<int> primaryKeys = [];
    final lockDetails = Provider.of<DataModel>(context, listen: false).getLockDetail('lockDetails');
    if (dataList.isNotEmpty) {
      for (var i = 0; i < dataList.length; i++) {
        processIds.add(dataList[i]['process_id']);
      }
    }
    FocusScope.of(context).requestFocus(FocusNode());
    await getDFKey();
    final pfDetails = await getPFDetails();
    final pfkey = pfDetails['key'];
    final url = pfDetails['url'];
    final primaryKey = pfDetails['primaryKey'];
    final initiatePF = await initiatePFDetails(pfkey);

    final nodeProperty = jsonDecode(initiatePF.body)['nodeProperty'];
    // Event Emitter
    final Map<String, dynamic> eventEmitterBody = {
      ...nodeProperty,
      "data": {
        "value": jsonDecode(pfDetails.body)['status'].toString()
      },
      "upId": processIds,
      "event": jsonDecode(initiatePF.body)['eventProperty']['sourceStatus']
    };
    try{
      final eventEmitter = await http.post(
        Uri.parse(Constants.eventEmitter),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token'
        },
        body: jsonEncode(eventEmitterBody),
      );
      if (eventEmitter.statusCode == 201) {
        if (dataList.isNotEmpty) {
          for (var i = 0; i < dataList.length; i++) {
            primaryKeys.add(dataList[i][primaryKey]);
          }
        }
        // handle update
        for (var j = 0; j < processIds.length; j++) {
          final updateResponse = await http.post(
              Uri.parse(Constants.handleUpdate),
              headers: <String, String>{
                'Content-Type': 'application/json; charset=UTF-8',
                'Authorization': 'Bearer $token'
              },
              body: jsonEncode({
                "lockDetails": {"ttl": int.parse(lockDetails['ttl'])},
                "data": [
                  {
                    "status": jsonDecode(pfDetails.body)['status'].toString(),
                    'modified_by': 'test'
                  }
                ],
                "key": dfkey,
                "upId": processIds[j].toString(),
                "tableName": jsonDecode(pfDetails.body)['tableName'],
                "primaryKey": [primaryKeys[j]],
                "url": dotenv.env['DS_URL'] ?? ''
              }));
          if (updateResponse.statusCode == 201) {
            <%_ if(eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'infoMsg' ){ _%>
                Common.flutterToaster('<%= eventDetailsArray[i].hlr.params.message %>'  , '<%= eventDetailsArray[i].hlr.params.type %>');
            <%_ } else {_%>
                Common.flutterToaster('Data updated Successfully', 'success');
            <%_ } _%>
            <%_ if(navigator){ _%>
              Navigator.pop(context);
            <%_ } _%>
          } else {
            Common.flutterToaster('Failed to update', 'F');
          }
        }
      } else {
        Common.flutterToaster(jsonDecode(eventEmitter.body)['errorDetails']['errorDetail'] ?? 'Failed to trigger a event','F');
      }
    } catch(e){
      Common.flutterToaster('Something went wrong','f');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  <%_ } _%>
  <%_ if(eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'bindTran' ){  _%>
  <%_ handler.push('bindTran') _%>
  void addData() {
    setState(() {
      _isLoading = true;
    });
    Provider.of<DataModel>(context, listen: false).addTableData(widget.formData!);
    setState(() {
      widget.callback!();
      _isLoading = false;
    });
  }
  <%_ } _%>
  <%_ } _%>
<%_ } _%>

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: !_isLoading ? <%_ if(handler.includes('save')){ _%> _handleSave <%_ } else if(handler.includes('update')){ _%> _handleUpdate <%_ } else if(handler.includes('bindTran')){_%> addData <%_ } else { _%> (){} <%_ } _%> : (){},
      child: SizedBox(
        width: widget.isBlockButton ? double.infinity : null,
        child: GSButton(
          action: widget.action,
          variant: widget.variant,
          size: widget.size,
          isDisabled: widget.isDisabled,
          onPressed: !_isLoading ? <%_ if(handler.includes('save')){ _%> _handleSave <%_ } else if(handler.includes('update')){ _%> _handleUpdate <%_ } else if(handler.includes('bindTran')){_%> addData <%_ } else { _%> (){} <%_ } _%> : (){},
          child: GSHStack(
            children: [
              if (widget.enableSpinner && _isLoading)
                GSSpinner(
                  size: widget.spinnerSize,
                  style: GSStyle(
                    color: widget.spinnerColor,
                  ),
                ),
              if (widget.enableIcon)
                GSButtonIcon(
                  icon: widget.icon ?? Icons.error,
                  iconSize: widget.iconSize,
                  style: GSStyle(
                    color: widget.iconColor,
                  ),
                ),
              if (widget.enableIcon || widget.enableSpinner && _isLoading)
                const SizedBox(
                  width: 12,
                ),
              GSButtonText(
                text: widget.buttonText ?? '',
                style: GSStyle(
                  color: $GSColors.primary700,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

